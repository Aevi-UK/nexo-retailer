apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.unbroken-dome.xjc'

group = 'com.aevi.nexo'
version = "${apiVersion}"
def jacksonDir = "build/jackson"

ext.applicationName = 'NexoModel'
ext.artifactGroupId = 'com.aevi.nexo'
ext.artifactId = 'NexoModel'

apply from: '../publish-repo-library.gradle'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url "http://dl.bintray.com/aevi/aevi-uk"
    }
}

xjcGenerate {
    extension = true
    extraArgs = [
            '-Xinheritance'
    ]
    includeInMainCompilation = false
}

task jacksonify(type: Copy) {
    dependsOn "xjcGenerate"
    from xjcGenerate.outputDirectory
    into jacksonDir

    filter {
        line ->
            def pattern = /(?<ws>\s*)@XmlElement\(name = \"(?<name>[^\"]*)\"(, required = (?<req>\w*))?(, type = ((?<type>\S*)))?\)/
            def pattern2 = /(?<ws>\s*)@XmlAttribute\(name = \"(?<name>[^\"]*)\"(, required = (?<req>\w*))?(, type = ((?<type>\S*)))?\)/
            def xmlElement = line =~ pattern
            def xmlAttribute = line =~ pattern2
            if (xmlElement.matches()) {
                if (xmlElement.group("req") == null) {
                    return xmlElement.replaceAll("\${ws}@JsonProperty(\"\${name}\")")
                } else {
                    return xmlElement.replaceAll("\${ws}@JsonProperty(value = \"\${name}\", required = \${req})")
                }
            } else if (xmlAttribute.matches()) {
                if (xmlAttribute.group("req") == null) {
                    return xmlAttribute.replaceAll("\${ws}@JsonProperty(\"\${name}\")") + "\n" + xmlAttribute.replaceAll("\${ws}@JacksonXmlProperty(isAttribute = true)")
                } else {
                    return xmlAttribute.replaceAll("\${ws}@JsonProperty(value = \"\${name}\", required = \${req})") + "\n" + xmlAttribute.replaceAll("\${ws}@JacksonXmlProperty(isAttribute = true)")
                }
            } else if (line.contains("@XmlAccessorType")) {
                return null
            } else if (line.contains("@XmlValue")) {
                return "@JacksonXmlText";
            } else if ((line.contains("@XmlElements(") || line.contains("@XmlType(")) && line.endsWith("{")) {
                return "/* " + line
            } else if (line.contains("import javax.xml.bind.JAXBElement")) {
                return "import com.aevi.javax.xml.bind.JAXBElement;"
            } else if (line.trim().equals("})")) {
                return line + "*/"
            } else if (line.contains("import javax.xml.bind.annotation.XmlAccessType;")) {
                return "import com.fasterxml.jackson.annotation.JsonProperty;"
            } else if (line.contains("import javax.xml.bind.annotation.XmlValue;")) {
                return "import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;"
            } else if (line.contains("import javax.xml.bind.annotation.XmlAttribute;")) {
                return "import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;"
            } else if (line.contains("com.aevi.jaxb.DateTimeAdapter")) {
                return null;
            } else if (line.contains("javax.xml.bind")) {
                return null;
            } else if (line.contains("@XmlType")) {
                return null;
            } else if (line.contains("@XmlEnum")) {
                return null;
            } else if (line.contains("@XmlSchemaType")) {
                return null;
            } else if (line.contains("@XmlJavaTypeAdapter")) {
                return null;
            } else if (line.contains("@XmlList")) {
                return null;
            } else if (line.contains("@XmlElementDecl")) {
                return null;
            } else if (line.contains("@XmlElementRef")) {
                return null;
            } else if (line.contains("@XmlRegistry")) {
                return null;
            } else if (line.contains("@XmlRootElement")) {
                return null;
            }

            return line
    }

}

sourceSets {
    main {
        java {
            srcDir file(jacksonDir)
        }
    }
}

compileJava.dependsOn.add("jacksonify")

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation domainDependencies.gson
    implementation domainDependencies.appFlowServiceApi
    implementation domainDependencies.appFlowConstants
    implementation domainDependencies.appFlowPaymentApi
    implementation domainDependencies.appFlowPrintApi
    implementation domainDependencies.zxing

    api 'com.aevi.sdk:xml-rename:1.0.0-SNAPSHOT'

    xjcClasspath 'org.jvnet.jaxb2_commons:jaxb2-basics:0.11.1'

    testImplementation testDependencies.junit
    testImplementation testDependencies.assertJ
    testImplementation testDependencies.opencsv
    testImplementation testDependencies.xpay
    testImplementation testDependencies.mockito
}

apply from: '../jar-publisher.gradle'
